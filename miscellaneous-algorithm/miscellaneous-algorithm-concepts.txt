Hashing is a technique to convert the object into integer value using some magical formula
we can then stroe data in that specific index of array and while retrieving we again will use same magic formula to convert object into int
data husd be present in that index of array
in java hashcode() method is used for hashing

Why we need hashing
This enhances the time complexity in searching of any given D.S
eg time complexities are as below

Array : O(n) - if sorted -> O(log n)
Linked list: O(n)
tree : O(n) or in BST -> O(log n)
hashing : O(1) if hashcode function is godd or in case of collison O(n)

hashcode generated by hash function si also known as digest

Easisest implementaion of hash function is : convert the object to hashcode int using hashCode method
and then divide that with size of array and take remainder of it(modulus) . this shud be the index of array to store data

properties of hashfunctions:
it shud use whole data presented eg: if a string is passed use all chars to create hashcode
it shud give more different response so that data can be shared across hashtables

Collison can be solved in below ways:
a. non liner structure : Like instead of storing array of data type store array of node type .
  ->  we can use next node and create a linekd list, In case of better performance we can use BST
  -> as time complexity of linked list is O(n) and that of BST is O(log n)
  b. linear next: keep on iterating the index(hashcode % size of array) until an empty index is found.
  c. quadratic next: we can add n  square to the index until we find empty index and keep on increment n in case of failure
  
  Basic benefit of hashtable/hashing in case hash function is good it can reduce the insertion/searching/deletion time to O(1) leve or 
  in case of collison O(n) or using BST in colliosn to O(log n)
  
  Pros/Cons of implemnentaion:
  a: linear probing :on collison we need to iterae the array -> time complezity is O(n) in collison case
  		also in case all indices are filled we have to create new array with doublke the size -   
  		_  but it cause holes menaing lot of index are empty in array
  b. linked list : Here on collison we can have next node linked to same index's head node
  					-> time complexity is O(n) but spae complezity is O(1) where as in linear probing using array it is O(n) space complezity