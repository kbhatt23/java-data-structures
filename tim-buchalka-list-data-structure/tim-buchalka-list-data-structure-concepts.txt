List -> abstarct data type representing the features a List can have, do not share how this data is stored and algo to consume the operations.
ArrayList: Nothing but a dynamic sized array
	-> good use case when we just need to iterate the content and have less modifications as time complexity will be O(1)
	-> But in case of lot of insertions it will need to cretae new array with more capcaity and copythe content of old array
	-> also in case of deletion it has to shift cells
	-> orderd just like array but not sorted
ArrayList set(index,val) method overrides the exiting value inthe mentioned index
	-> whereas add(index,val) insert value at that index and shift cells, 
	-> .add(val) method adds value at the end and increases size if needed 
LinkedList: A doubly linked list implemenetaion
	-> good use case when we need to insert a lot as no need of shfting the array index(uses next node linking)
	-> also in case we need to delete or insert at middle as no need to shift cells
	-> not good in case of read operations
	-> even finding an element at index it will take O(n) complexity but in arraylist this will take O(1)
	-> insertion in the middle will take O(n) complexity in arrayList but in linked list it will be O(1)
	
Difference between is that Vector methods are thread safe and arraylist methods are not synchronized
-> Both the classes uses array to store data and both are implementing List abstract data type
Linked list does not uses Arrays instead uses node concept hence it is not bound to size
-> but even though we know the index time complexity to find elmenet is still O(n)

JDK provided Linked list is double linked list
- meaning we can add element at the start as well at the end with O(1) time complexity
- Along with list interface implementation , it also implement deque interface hence getting peek(), peekAtstart(),peekAtEnd(), poll() etc mthod
	-> addFirst,addLast etc
	
==================Stack==================
Based on LIFO - >last in first out
- any new items always comes at the top
- any pop operation gives item at the top
- no random access of ellment- > to get nth element you have to pop out all the elemnets before that

Implemenations:
a. array : 
	-> if we are sure the max size of stack then we can use this
	- > time complexity > push -> can be O(n) as we might have to grow the array in case it is already full
		pop -> O(1) , peek O(1)
	-> not ideal as sie can be fixed
b. Linked list: 
	-> good use case as we always manipulate at the head , single linked list will do the job as random access is not allowed
	-> time complexity of push pop peek all will be O(1) 
	
Java provide OOB Stack class that extends Vector and it is not recommended now as it has methods synchronized
- Instead we can use interface deque for it and class name is ArrayDeque
- But this class uses array for internal storage so push method can be of O(n) time complexity in case array is full
- Another class LinkedList that implements list and Deque both -> this can be used for list implementatio of stack
	-> peekfirst a, addFirst can be used
	hence linkedlist class in jdk can be used for both list and stack implmeentation
	
Best approach will be to create our own stack class and put LinkedList as an instance variable and just use that 
	so that new devlopers do not accidentally call List interface methods of the class 
	-> just show push, pop, peek methods as thats what stack is all about
	
Methods of Queue:
offer , peek, poll(same as pop from stack but it return object that was added first)
we can implement using array or linked list(preferred)
	- > insertion at the tail and poll/removal from head
	
ArrayBlocking queue -> A queue implmentaion using array and have blocked behavious
	-> part of concurrent collection
	-> on removal if all items are removed it blocks unitl another thread inserts item and again once done it start dequeuing again
	-> on addition if max limit is reached it blocks until another thread deques element to make space to be inserted
	-> implementation of producer consumer
	-> capcaiuty do not change -> do not resize the array storage
	-> thread safe
Queue is an interface that follows FIFO meaning insertion happens at tail and removal happens at head
Deque interface is extension of Queue -> also knows as double ended queue
	-> insertion/removal at both head and tail are there
ArrayDeque -> arra based implemetation of Deque interface -> insertion temoval at head nad tail both are presenet
	=> preferred over Stack class that extends Vector and have synchronized methods